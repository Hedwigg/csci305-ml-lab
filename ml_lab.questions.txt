Joel Lechman
CSCI 305
Spring 2018
Lab Questions
=======================
1. val it = [4,2,5,2,6,10] : int list

2. Function 'f' increments each element in a list by 1. If the list has no elements,
	it doesn't do anything.

3. The line before "a" defines a function 'f' that takes a list[] as a parameter and returns either an empty list using the pattern []
 	(if the input list was empty) or (line b).

4. Line b splits the list into a 'head' and 'tail' so that we can operate on one element in the list at a time. It adds 1 to the current 'head'
		element and then recurses with the tail of the list. This effectively loops though each element in the list and adds 1 to it. The looping is handled with recursion.

5. false

6. Tail recursion, once we hit the base case we are done. We don't have to go back up a stack.

7. val it = Set ("it",Set ("was", Set #)) : string set
	or the full version without the #:
	val it = Set("it",Set("was",Set("the",Set("best", Set("of", Set("times,", Set("it", Set("was", Set("the", Set("worst", Set("of", Set("times",Empty))))))))))));

8. It can be beneficial to write tail recursing functions because unlike a normal function, it does not need to have a stack frame for the compiler to come
		back to. With tail recursing function you can just pass the result of the recursive call instead of waiting for it (you don't need to consume any space on the stack)
		this improves memory usage of the function and prevents stack overflow.

9. val it = Set("green",Set ("eggs",Set #)) : string set
		which is:
		val it = Set("green",Set ("eggs",Set ("and", Set("ham", Empty)))

10. val it = Set ("and",Set("macaroni",Empty)) : String set

11. Something I like about ML is how functions can be so much more detailed by the use of patterns. My favorite pattern is the cons of patterns as a pattern.
	Ex. Using (hd::tl) to manipulate elements in lists or any other cool recursion solution to a basic problem.

12.	What I dislike most about ML is its readability to those who are not super experienced in the language. The shorthand and uncommon syntax still throws me though
	 a loop sometimes. Especially when I am reading new or unfamiliar code. It takes me a considerable amount more time to understand basic code in ML than if it
	 was written in another language.


13. I enjoyed this lab in the idea that it challenged me to learn a lot about a language that I really do not enjoy working with. I find ML really hard to read
		so working on this lab was quite infuriating at times because if I get distracted in the middle of figuring out what a line says/does I have to start over.
		I really do like how well the starting code is explained to us. Compared to the ruby lab it was a lot easier to understand what was already going on in the
		program and what I needed to add myself.

14. ~7 hours

15. I really hope that I do not have to use ML again. At least not for every day programming because other languages are 100x easier for simple projects. If I ever
		need the module system in SML, then I'll actually use it.
